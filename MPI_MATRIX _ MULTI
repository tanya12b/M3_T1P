#include <iostream>
#include <fstream>
#include <cstdlib>
#include <ctime>
#include <chrono>
#include <mpi.h>

using namespace std;
using namespace chrono;

const int MAX_SIZE = 100;  // Maximum matrix size

void initializeMatrix(int matrix[MAX_SIZE][MAX_SIZE], int size) {
    for (int i = 0; i < size; ++i) {
        for (int j = 0; j < size; ++j) {
            matrix[i][j] = rand() % 10;  // Initialize with random values
        }
    }
}

void multiplyMatrices(int A[MAX_SIZE][MAX_SIZE], int B[MAX_SIZE][MAX_SIZE], int C[MAX_SIZE][MAX_SIZE], int size, int num_threads) {
    omp_set_num_threads(num_threads);
    #pragma omp parallel for
    for (int i = 0; i < size; ++i) {
        for (int j = 0; j < size; ++j) {
            C[i][j] = 0;
            for (int k = 0; k < size; ++k) {
                C[i][j] += A[i][k] * B[k][j];
            }
        }
    }
}

void printMatrix(int matrix[MAX_SIZE][MAX_SIZE], int size, const char* filename) {
    ofstream outputFile(filename);
    for (int i = 0; i < size; ++i) {
        for (int j = 0; j < size; ++j) {
            outputFile << matrix[i][j] << " ";
        }
        outputFile << endl;
    }
    outputFile.close();
}

int main(int argc, char* argv[]) {
    MPI_Init(&argc, &argv); // Initialize MPI environment

    srand(time(0));  // Seed for random number generation

    int rank, size;
    MPI_Comm_rank(MPI_COMM_WORLD, &rank); // Get current process ID
    MPI_Comm_size(MPI_COMM_WORLD, &size); // Get number of processes

    // Generate a random matrix size between 2 and MAX_SIZE
    int sizes[] = {50, 100, 150};
    int threads[] = {2, 4, 6};

    for (int size : sizes) {
        for (int num_threads : threads) {
            auto start_time = high_resolution_clock::now();  // Start measuring time

            int A[MAX_SIZE][MAX_SIZE];
            int B[MAX_SIZE][MAX_SIZE];
            int C[MAX_SIZE][MAX_SIZE];

            if (rank == 0) {
                initializeMatrix(A, size);
                initializeMatrix(B, size);
            }

            // Broadcast matrices A and B to all processes
            MPI_Bcast(&A, size * size, MPI_INT, 0, MPI_COMM_WORLD);
            MPI_Bcast(&B, size * size, MPI_INT, 0, MPI_COMM_WORLD);

            // Perform matrix multiplication
            multiplyMatrices(A, B, C, size, num_threads);

            auto end_time = high_resolution_clock::now();  // Stop measuring time
            auto duration = duration_cast<microseconds>(end_time - start_time);

            // Print execution time and output matrices to files
            if (rank == 0) {
                cout << "Matrix Size: " << size << "x" << size << ", Threads: " << num_threads
                     << ", Execution Time: " << duration.count() << " microseconds" << endl;
                printMatrix(A, size, "matrix_A.txt");
                printMatrix(B, size, "matrix_B.txt");
                printMatrix(C, size, "matrix_C.txt");
            }
        }
    }

    MPI_Finalize(); // Shutdown MPI environment

    return 0;
}
